Big O notation aka running time

Tells how fast an algorithm is.

Example, comparing basic search to binary search. With a list of 100 elements to be checked, which is faster if the operation needs to run under 10 seconds?
Assuming that the search takes 1 ms to check 1 element

Binary search:
log (2) 100 = x where x = 7ms
Simple search:
x = 100ms
With 100ms / 7ms; Binary Search takes 14 times faster than Simple Search.

Now how about for 10,000 elements?

Binary search:
log (2) 10000 = x where x = 14ms
Simple search:
x = 10000ms; 10000 * 0.001 = 10s
With 10000ms / 14ms; Binary Search takes 714 times faster than Simple Search.

Now how about for 1 billion elements?

Binary search:
log (2) 1000000000 = x where x = 30ms
Simple search:
x = 1000000000ms; 1000000000 * 0.001 = 12 days
With 1000000000ms / 30ms; Binary Search takes 33 million times faster than Simple Search.

Now how about for 4 billion elements?

Binary search:
log (2) 4000000000 = x where x = 32ms
Simple search:
x = 4000000000ms; 4000000000 * 0.001 = 46 days
With 4000000000ms / 32ms; Binary Search takes 125 million times faster than Simple Search.

Exercise # 1:

For drawing each box in a 16 box grid with the use of 5 Big O run times which are:

1) O (log n) aka log time (example: Binary search)
2) O (n) aka linear time (example: Simple search)
3) O (n log n) a fast sorting algorithm (example: Quick sort)
4) O (n^2) aka slow sort (example: Selection Sort)
5) O (n!) aka really slow algorithm (example: Traveling Salesperson)

If you can do 10 operations/second (0.1), how long will it take each one?

1) For 16 elements, binary search takes at most 4 times. 4 * 0.1 = 0.4
Therefore drawing each box in a 16 box grid for binary search takes 0.4s. 0.4 * 10 = 4 operations at most

2) For 16 elements, simple search takes at most 16 times. 16 * 0.1 = 1.6
Therefore drawing each box in a 16 box grid for simple search takes 1.6s. 1.6 * 10 = 16 operations at most

3) It would take around 6.4s. To be explored...

4) It would take around 25.6s. To be explored...

5) It would take around 66301 years. To be explored...

Other Exercises:
Give the run time for each of these scenarios in terms of Big O.

1.3) You have a name, and you want to find the person's phone number in the phone book.

O (log n) is appropriate since binary search can be used to find the name (A-Z) which leads to the phone number.

1.4) You have a phone number, and you want to fine the person's name in the phone book. (Hint: You'll have to search through the whole book!)

O (n) would be the correct run time since entries are unsorted.

1.5) You want to read the numbers of every person in the phone book.

O (n) would be the correct run time. Each person would be searched for but order does not matter so it will be unsorted, and reading their numbers is negligible (based on they have already have found)

1.6 You want to read the numbers of just the A's. (This is a tricky one! It involves concepts that are covered more in chapter 4. Read answer - you may be surprised!)

O (n) would be the correct run time since the names starting with A's do not need to be sorted.